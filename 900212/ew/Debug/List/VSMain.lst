##############################################################################
#                                                                            #
# IAR Atmel AVR C Compiler V3.10C/W32                  31/Jan/2006  09:32:56 #
# Copyright 1996-2004 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Source file  =  M:\VisualState\ProjectM16Motor\ew\src\VSMain.c          #
#    Command line =  --cpu=m16 -ms -o M:\VisualState\ProjectM16Motor\ew\Debu #
#                    g\Obj\ -lC M:\VisualState\ProjectM16Motor\ew\Debug\List #
#                    \ -lB M:\VisualState\ProjectM16Motor\ew\Debug\List\     #
#                    -z2 --no_cse --no_inline --no_code_motion               #
#                    --no_cross_call --no_clustering --debug                 #
#                    -DENABLE_BIT_DEFINITIONS -e -I                          #
#                    M:\VisualState\ProjectM16Motor\ew\src\ -I               #
#                    M:\VisualState\ProjectM16Motor\ew\vssrc\ -I             #
#                    M:\VisualState\ProjectM16Motor\ew\vsapi\ -I             #
#                    "C:\Program Files\IAR Systems\Embedded Workbench        #
#                    3.2\avr\INC\" -I "C:\Program Files\IAR                  #
#                    Systems\Embedded Workbench 3.2\avr\INC\CLIB\"           #
#                    --eeprom_size 512 M:\VisualState\ProjectM16Motor\ew\src #
#                    \VSMain.c                                               #
#    List file    =  M:\VisualState\ProjectM16Motor\ew\Debug\List\VSMain.lst #
#    Object file  =  M:\VisualState\ProjectM16Motor\ew\Debug\Obj\VSMain.r90  #
#                                                                            #
#                                                                            #
##############################################################################

M:\VisualState\ProjectM16Motor\ew\src\VSMain.c
      1          /*****************************************************************************
      2          * IAR visualSTATE Main Loop Source File
      3          *
      4          * The file contains an implementation for a main loop using the visualSTATE
      5          * basic API.
      6          *
      7          * The code uses a simple queue for storing events. The functions for inter-
      8          * facing to the queue are described in the sample code file
      9          * simpleEventHandler.h.
     10          *****************************************************************************/
     11          
     12          
     13          
     14          #include <iom16.h>		 	// Atmel up definitions
     15          #include <inavr.h>			// AVR intrinsic functions
     16          #include "VSMain.h"			// VisualState definitions (further includes)
     17          
     18          void InitDevice(void);		// Critical device I/O setup
     19          void InitOutputs(void);		// Critical PORT setup (i.e. devices off)
     20          void UserLoop(void);		// User (application) loop
     21          
     22          							// NB. Setup of interrupts = DeviceSetup.c
     23          
     24          
     25          void HandleError(unsigned char cc);
     26          
     27          
     28          void RealLinkCommInit(void);
     29          
     30          

   \                                 In segment CODE, align 2, keep-with-next
     31          void HandleError(unsigned char cc) 
   \                     HandleError:
   \                     ??HandleError_0:
     32          {
     33            /* Critical error: Stop State Machine: */
     34            while(1)
   \   00000000   CFFF                       RJMP    ??HandleError_0
     35            {
     36          	// force watch-dog error (maybe set status led)
     37            }
     38          }
     39          

   \                                 In segment CODE, align 2, keep-with-next
     40          void main(void) 
   \                     main:
     41          {
   \   00000000   938A                       ST      -Y,R24
   \   00000002   9722                       SBIW    R29 : R28,2
     42          /* Define completion code variable. */
     43          unsigned char cc;
     44          
     45          /* Define action expression variable. */
     46          SEM_ACTION_EXPRESSION_TYPE actionExpressNo;
     47          
     48          /* Define and initialize. */
     49          SEM_EVENT_TYPE eventNo;
     50          
     51          	__disable_interrupt();
   \   00000004   94F8                       CLI
     52          
     53          	InitDevice();
   \   00000006   ........                   CALL    InitDevice
     54          
     55          	InitOutputs();
   \   0000000A   ........                   CALL    InitOutputs
     56              
     57          	/* Initialize the VS System. */
     58          	SEM_InitAll();
   \   0000000E   ........                   CALL    SEM_InitAll
     59              
     60          #if (VS_REALLINKMODE == 1)    
     61          	/* Initialize RealLink communication. */
     62          	RealLinkCommInit();
     63          	/* Initializing RealLink API. */
     64          	VS_RealLinkInit();    
     65          #endif  
     66            
     67          	/* Initialize the VS Event queue. */
     68          	SEQ_Initialize();
   \   00000012   ........                   CALL    SEQ_Initialize
     69            
     70          	/* Add SE_RESET to initialize system. */
     71          	SEQ_AddEvent(SE_RESET);
   \   00000016   E000                       LDI     R16,0
   \   00000018   ........                   CALL    SEQ_AddEvent
     72          
     73          	__enable_interrupt();
   \   0000001C   9478                       SEI
     74            
     75          	/* Do forever: */
     76          	for(;;) 
     77            	{    
     78          #if (VS_REALLINKMODE == 1)
     79              	    VS_WAIT();
     80          #endif        
     81          
     82                      /* Provide function to do any other user (application) processing */
     83                      UserLoop();
   \                     ??main_0:
   \   0000001E   ........                   CALL    UserLoop
     84          
     85                      if(SEQ_RetrieveEvent(&eventNo) != UCC_QUEUE_EMPTY)
   \   00000022   018E                       MOVW    R17 : R16,R29 : R28
   \   00000024   ........                   CALL    SEQ_RetrieveEvent
   \   00000028   3F0E                       CPI     R16,254
   \   0000002A   F3C9                       BREQ    ??main_0
     86                      {     
     87                		/* Deduct the event. */
     88                		if ((cc = SEM_Deduct(eventNo)) != SES_OKAY) 
   \   0000002C   8108                       LD      R16,Y
   \   0000002E   ........                   CALL    SEM_Deduct
   \   00000032   2F80                       MOV     R24,R16
   \   00000034   2388                       TST     R24
   \   00000036   F011                       BREQ    ??main_1
     89          	          HandleError(eventNo);
   \   00000038   8108                       LD      R16,Y
   \   0000003A   ....                       RCALL   HandleError
     90                
     91                		/* Get resulting action expressions and execute them. */
     92                		while ((cc = SEM_GetOutput(&actionExpressNo)) == SES_FOUND) 
   \                     ??main_1:
   \   0000003C   018E                       MOVW    R17 : R16,R29 : R28
   \   0000003E   5F0F                       SUBI    R16,255
   \   00000040   4F1F                       SBCI    R17,255
   \   00000042   ........                   CALL    SEM_GetOutput
   \   00000046   2F80                       MOV     R24,R16
   \   00000048   3081                       CPI     R24,1
   \   0000004A   F461                       BRNE    ??main_2
     93                  	  SEM_Action(actionExpressNo);
   \   0000004C   8109                       LDD     R16,Y+1
   \   0000004E   E010                       LDI     R17,0
   \   00000050   0F00                       LSL     R16
   \   00000052   1F11                       ROL     R17
   \   00000054   01F8                       MOVW    R31 : R30,R17 : R16
   \   00000056   ....                       SUBI    R30,LOW((-(System1VSAction) & 0xFFFF))
   \   00000058   ....                       SBCI    R31,(-(System1VSAction) & 0xFFFF) >> 8
   \   0000005A   8100                       LD      R16,Z
   \   0000005C   8111                       LDD     R17,Z+1
   \   0000005E   01F8                       MOVW    R31 : R30,R17 : R16
   \   00000060   9509                       ICALL
   \   00000062   CFEC                       RJMP    ??main_1
     94                      
     95                		/* Check for error. */
     96                		if (cc != SES_OKAY) 
   \                     ??main_2:
   \   00000064   2388                       TST     R24
   \   00000066   F011                       BREQ    ??main_3
     97                  	  HandleError(cc);
   \   00000068   2F08                       MOV     R16,R24
   \   0000006A   ....                       RCALL   HandleError
     98                
     99                		/* Change the next state vector. */
    100                		if ((cc = SEM_NextState()) != SES_OKAY) 
   \                     ??main_3:
   \   0000006C   ........                   CALL    SEM_NextState
   \   00000070   2F80                       MOV     R24,R16
   \   00000072   2388                       TST     R24
   \   00000074   F2A1                       BREQ    ??main_0
    101                  	  HandleError(cc);          
   \   00000076   2F08                       MOV     R16,R24
   \   00000078   ....                       RCALL   HandleError
   \   0000007A   CFD1                       RJMP    ??main_0
    102                      }  
    103          	}
    104          }

   Maximum stack usage in bytes:

     Function               CSTACK RSTACK
     --------               ------ ------
     HandleError                0      2
     main                       3      2
       -> InitDevice            3      2
       -> InitOutputs           3      2
       -> SEM_InitAll           3      2
       -> SEQ_Initialize        3      2
       -> SEQ_AddEvent          3      2
       -> UserLoop              3      2
       -> SEQ_RetrieveEvent     3      2
       -> SEM_Deduct            3      2
       -> HandleError           3      2
       -> SEM_GetOutput         3      2
       ->   Indirect call       3      2
       -> HandleError           3      2
       -> SEM_NextState         3      2
       -> HandleError           3      2


   Segment part sizes:

     Function/Label  Bytes
     --------------  -----
     ??HandleError_0    2
     main             124

 
 126 bytes in segment CODE
 
 126 bytes of CODE memory

Errors: none
Warnings: none
