//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR Atmel AVR C Compiler V3.10C/W32                 31/Jan/2006  09:32:47 /
// Copyright 1996-2004 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Source file  =  M:\VisualState\ProjectM16Motor\ew\vssrc\System1Data.c  /
//    Command line =  --cpu=m16 -ms -o M:\VisualState\ProjectM16Motor\ew\Deb /
//                    ug\Obj\ -lC M:\VisualState\ProjectM16Motor\ew\Debug\Li /
//                    st\ -lB M:\VisualState\ProjectM16Motor\ew\Debug\List\  /
//                    -z2 --no_cse --no_inline --no_code_motion              /
//                    --no_cross_call --no_clustering --debug                /
//                    -DENABLE_BIT_DEFINITIONS -e -I                         /
//                    M:\VisualState\ProjectM16Motor\ew\src\ -I              /
//                    M:\VisualState\ProjectM16Motor\ew\vssrc\ -I            /
//                    M:\VisualState\ProjectM16Motor\ew\vsapi\ -I            /
//                    "C:\Program Files\IAR Systems\Embedded Workbench       /
//                    3.2\avr\INC\" -I "C:\Program Files\IAR                 /
//                    Systems\Embedded Workbench 3.2\avr\INC\CLIB\"          /
//                    --eeprom_size 512 M:\VisualState\ProjectM16Motor\ew\vs /
//                    src\System1Data.c                                      /
//    List file    =  M:\VisualState\ProjectM16Motor\ew\Debug\List\System1Da /
//                    ta.s90                                                 /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME System1Data

        RSEG CSTACK:DATA:NOROOT(0)
        RSEG RSTACK:DATA:NOROOT(0)

        EXTERN ?need_segment_init

        PUBWEAK `?<Segment init: NEAR_I>`
        PUBWEAK `?<Segment init: NEAR_Z>`
        PUBLIC System1VSAction
        PUBLIC System1VSAction_21
        PUBLIC System1VSAction_22
        PUBLIC System1VSAction_23
        PUBLIC VSGuard
        PUBWEAK __?EEARH
        PUBWEAK __?EEARL
        PUBWEAK __?EECR
        PUBWEAK __?EEDR
        PUBLIC val_ip_hom
        PUBLIC val_ip_lim
        PUBLIC vsstick_stall
        PUBLIC vsstick_txwait

        EXTERN TM_Status
        EXTERN TM_Stall
        EXTERN TM_TimerTxWait
        EXTERN A_AxisCalcProfile
        EXTERN A_AxisPosUpdate
        EXTERN A_ForceStop
        EXTERN A_Initialise
        EXTERN A_MotorError
        EXTERN A_MotorFwd
        EXTERN A_MotorIdle
        EXTERN A_MotorMove
        EXTERN A_MotorOn
        EXTERN A_MotorReRef
        EXTERN A_MotorRev
        EXTERN A_MotorStop
        EXTERN A_MotorTest
        EXTERN A_Periodic
        EXTERN A_RxDoComms
        EXTERN A_RxProcess
        EXTERN A_TxChar
        EXTERN A_TxEnableOff
        EXTERN A_TxEnableOn
        EXTERN A_TxProcessMsg
        EXTERN A_TxTestBusIdle

// M:\VisualState\ProjectM16Motor\ew\vssrc\System1Data.c
//    1 /*
//    2  * Id:        System1Data.c
//    3  *
//    4  * Function:  VS System Data Source File.
//    5  *
//    6  * Generated: Fri Jan 13 13:08:29 2006
//    7  *
//    8  * Coder 5.1.0.215 
//    9  * 
//   10  * This is an automatically generated file. It will be overwritten by the Coder. 
//   11  * 
//   12  * DO NOT EDIT THE FILE! 
//   13  */
//   14 
//   15 
//   16 /*
//   17  * Include SEM Library Header File.
//   18  */
//   19 #include "SEMLibB.h"
//   20 
//   21 
//   22 /*
//   23  * Include VS System Data Header File.
//   24  */
//   25 #include "System1Data.h"
//   26 
//   27 
//   28 /*
//   29  * Include VS System Action Expression Pointer Table File.
//   30  */
//   31 #include "System1Action.h"
//   32 
//   33 
//   34 /*
//   35  * Include Compiler Standard Library Header Files.
//   36  */
//   37 #if (SEM_DEDUCT_WITH_VA_LIST)
//   38 #include <stdarg.h>
//   39 #endif
//   40 
//   41 
//   42 /*
//   43  * VS System External Variable Declarations.
//   44  */

        RSEG NEAR_Z:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_Z>`
//   45 VS_UCHAR val_ip_hom;
val_ip_hom:
        DS 1
//   46 

        RSEG NEAR_Z:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_Z>`
//   47 VS_UCHAR val_ip_lim;
val_ip_lim:
        DS 1
//   48 

        RSEG NEAR_Z:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_Z>`
//   49 VS_UINT vsstick_stall;
vsstick_stall:
        DS 2
//   50 

        RSEG NEAR_Z:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_Z>`
//   51 VS_UINT vsstick_txwait;
vsstick_txwait:
        DS 2
//   52 
//   53 typedef struct
//   54 {
//   55   VS_UCHAR         VS_UCHARVar[0X00013];
//   56   VS_UINT16        VS_UINT16Var[0X00002];
//   57   VS_INT           VS_INTVar[0X00002];
//   58 } VSINTVARDATA;
//   59 
//   60 
//   61 
//   62 /*
//   63  * VS System Internal Variable Declaration.
//   64  */
//   65 static VSINTVARDATA VSIntVar;
//   66 
//   67 
//   68 
//   69 
//   70 /*
//   71  * Guard Expression Functions.
//   72  */

        RSEG CODE:CODE:NOROOT(1)
//   73 static VS_BOOL VSGuard_0 (VS_VOID)
VSGuard_0:
//   74 {
//   75   return SEM_GUARD_TYPE_CAST ((val_ip_hom == 0) && (val_ip_lim == 0));
	LDS	R16,val_ip_hom
	TST	R16
	BRNE	??VSGuard_0_0
	LDS	R16,val_ip_lim
	TST	R16
	BRNE	??VSGuard_0_0
	LDI	R16,1
	RET
??VSGuard_0_0:
	LDI	R16,0
	RET
//   76 }
//   77 
//   78 
//   79 /*
//   80  * Guard Expression Pointer Table.
//   81  */

        RSEG NEAR_I:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_I>`
//   82 VS_GUARDEXPR_TYPE const VSGuard[1] = 
VSGuard:
        DS 2
	REQUIRE `?<Initializer for VSGuard>`
//   83 {
//   84   VSGuard_0
//   85 };
//   86 
//   87 
//   88 
//   89 /*
//   90  * Action Expression Functions.
//   91  */

        RSEG CODE:CODE:NOROOT(1)
//   92 VS_VOID System1VSAction_21 (VS_VOID)
System1VSAction_21:
//   93 {
//   94   TM_Status (14 /* E_Periodic */, 10);
	LDI	R18,10
	LDI	R19,0
	LDI	R16,14
	LDI	R17,0
	CALL	TM_Status
//   95 }
	RET

        RSEG CODE:CODE:NOROOT(1)
//   96 VS_VOID System1VSAction_22 (VS_VOID)
System1VSAction_22:
//   97 {
//   98   TM_Stall (9 /* E_AxisStall */, vsstick_stall);
	LDI	R30,LOW(vsstick_stall)
	LDI	R31,(vsstick_stall) >> 8
	LD	R18,Z
	LDD	R19,Z+1
	LDI	R16,9
	LDI	R17,0
	CALL	TM_Stall
//   99 }
	RET

        RSEG CODE:CODE:NOROOT(1)
//  100 VS_VOID System1VSAction_23 (VS_VOID)
System1VSAction_23:
//  101 {
//  102   TM_TimerTxWait (19 /* E_TimerTxWait */, vsstick_txwait);
	LDI	R30,LOW(vsstick_txwait)
	LDI	R31,(vsstick_txwait) >> 8
	LD	R18,Z
	LDD	R19,Z+1
	LDI	R16,19
	LDI	R17,0
	CALL	TM_TimerTxWait
//  103 }
	RET
//  104 
//  105 
//  106 /*
//  107  * Action Expression Pointer Table.
//  108  */

        RSEG NEAR_I:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_I>`
//  109 VS_ACTIONEXPR_TYPE const System1VSAction[24] = 
System1VSAction:
        DS 48
	REQUIRE `?<Initializer for System1VSAction>`

        ASEGN ABSOLUTE:DATA:NOROOT,01cH
__?EECR:

        ASEGN ABSOLUTE:DATA:NOROOT,01dH
__?EEDR:

        ASEGN ABSOLUTE:DATA:NOROOT,01eH
__?EEARL:

        ASEGN ABSOLUTE:DATA:NOROOT,01fH
__?EEARH:

        RSEG INITTAB:CODE:NOROOT(0)
`?<Segment init: NEAR_Z>`:
	DW	SFE(NEAR_Z) - SFB(NEAR_Z)
	DW	SFB(NEAR_Z)
	DW	0
	REQUIRE ?need_segment_init

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for VSGuard>`:
        DW VSGuard_0/2

        RSEG INITTAB:CODE:NOROOT(0)
`?<Segment init: NEAR_I>`:
	DW	SFE(NEAR_I) - SFB(NEAR_I)
	DW	SFB(NEAR_I)
	DW	SFB(NEAR_ID)
	REQUIRE ?need_segment_init

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for System1VSAction>`:
        DW A_AxisCalcProfile/2, A_AxisPosUpdate/2, A_ForceStop/2
        DW A_Initialise/2, A_MotorError/2, A_MotorFwd/2, A_MotorIdle/2
        DW A_MotorMove/2, A_MotorOn/2, A_MotorReRef/2, A_MotorRev/2
        DW A_MotorStop/2, A_MotorTest/2, A_Periodic/2, A_RxDoComms/2
        DW A_RxProcess/2, A_TxChar/2, A_TxEnableOff/2, A_TxEnableOn/2
        DW A_TxProcessMsg/2, A_TxTestBusIdle/2, System1VSAction_21/2
        DW System1VSAction_22/2, System1VSAction_23/2

        END
//  110 {
//  111   A_AxisCalcProfile,
//  112   A_AxisPosUpdate,
//  113   A_ForceStop,
//  114   A_Initialise,
//  115   A_MotorError,
//  116   A_MotorFwd,
//  117   A_MotorIdle,
//  118   A_MotorMove,
//  119   A_MotorOn,
//  120   A_MotorReRef,
//  121   A_MotorRev,
//  122   A_MotorStop,
//  123   A_MotorTest,
//  124   A_Periodic,
//  125   A_RxDoComms,
//  126   A_RxProcess,
//  127   A_TxChar,
//  128   A_TxEnableOff,
//  129   A_TxEnableOn,
//  130   A_TxProcessMsg,
//  131   A_TxTestBusIdle,
//  132   System1VSAction_21,
//  133   System1VSAction_22,
//  134   System1VSAction_23
//  135 };
//  136 
// 
// 74 bytes in segment CODE
// 12 bytes in segment INITTAB
// 50 bytes in segment NEAR_I
// 50 bytes in segment NEAR_ID
//  6 bytes in segment NEAR_Z
// 
// 124 bytes of CODE memory (+ 12 bytes shared)
//  56 bytes of DATA memory
//
//Errors: none
//Warnings: 1
