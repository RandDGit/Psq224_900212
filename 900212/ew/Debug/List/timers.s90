//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR Atmel AVR C Compiler V3.10C/W32                 31/Jan/2006  09:33:07 /
// Copyright 1996-2004 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Source file  =  M:\VisualState\ProjectM16Motor\ew\src\timers.c         /
//    Command line =  --cpu=m16 -ms -o M:\VisualState\ProjectM16Motor\ew\Deb /
//                    ug\Obj\ -lC M:\VisualState\ProjectM16Motor\ew\Debug\Li /
//                    st\ -lB M:\VisualState\ProjectM16Motor\ew\Debug\List\  /
//                    -z2 --no_cse --no_inline --no_code_motion              /
//                    --no_cross_call --no_clustering --debug                /
//                    -DENABLE_BIT_DEFINITIONS -e -I                         /
//                    M:\VisualState\ProjectM16Motor\ew\src\ -I              /
//                    M:\VisualState\ProjectM16Motor\ew\vssrc\ -I            /
//                    M:\VisualState\ProjectM16Motor\ew\vsapi\ -I            /
//                    "C:\Program Files\IAR Systems\Embedded Workbench       /
//                    3.2\avr\INC\" -I "C:\Program Files\IAR                 /
//                    Systems\Embedded Workbench 3.2\avr\INC\CLIB\"          /
//                    --eeprom_size 512 M:\VisualState\ProjectM16Motor\ew\sr /
//                    c\timers.c                                             /
//    List file    =  M:\VisualState\ProjectM16Motor\ew\Debug\List\timers.s9 /
//                    0                                                      /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME timers

        RSEG CSTACK:DATA:NOROOT(0)
        RSEG RSTACK:DATA:NOROOT(0)

        PUBWEAK __?EEARH
        PUBWEAK __?EEARL
        PUBWEAK __?EECR
        PUBWEAK __?EEDR
        PUBLIC wal_tc_stall
        PUBLIC wal_tc_tick
        PUBLIC wal_timer_counter

        EXTERN ws_ctimer
        EXTERN wsp_tc

// M:\VisualState\ProjectM16Motor\ew\src\timers.c
//    1 /* Centralise all timer functions (as timer functions tend to be critical) */
//    2 
//    3 #include <iom16.h>		 	// Atmel up definitions
//    4 #include <inavr.h>			// AVR intrinsic functions
//    5 #include "VSMain.h"			// VisualState definitions (further includes)
//    6 
//    7 #include "defs.h"			// Application (GENERAL) defs
//    8 #include "globals.h"		// Application global data/variables
//    9 
//   10 
//   11 /* Timer routines */
//   12 void wal_tc_tick( void);
//   13 void wal_tc_stall( void);
//   14 void wal_timer_counter( void);
//   15 
//   16 /* use structure wdef_ctimer to provide timer-counter functions */
//   17 /* ws_ctimer[] is the available counter timer array */
//   18 /* maximum allowable functions according to WDEF_MAX_TIMERS */
//   19 

        RSEG CODE:CODE:NOROOT(1)
//   20 void wal_tc_tick( void)
wal_tc_tick:
//   21 {
//   22 // generate VSS SEQ tick function (periodic function)
//   23 }
	RET
//   24 

        RSEG CODE:CODE:NOROOT(1)
//   25 void wal_tc_stall( void)
wal_tc_stall:
//   26 {
//   27 // generate VSS SEQ stall function
//   28 }
	RET
//   29 

        RSEG CODE:CODE:NOROOT(1)
//   30 void wal_timer_counter( void)
wal_timer_counter:
//   31 {
	ST	-Y,R27
	ST	-Y,R26
//   32 // basic application counter timer using struct wdef_ctimer
//   33 // unsigned char used;
//   34 // unsigned int count;
//   35 // void (*exp_routine)();
//   36 
//   37 	wsp_tc = ws_ctimer;		// &ws_ctimer[0];
	LDI	R16,LOW(ws_ctimer)
	LDI	R17,(ws_ctimer) >> 8
	LDI	R30,LOW(wsp_tc)
	LDI	R31,(wsp_tc) >> 8
	ST	Z,R16
	STD	Z+1,R17
//   38 
//   39 	if( wsp_tc->exp_routine != NULL)
	LDI	R26,LOW(wsp_tc)
	LDI	R27,(wsp_tc) >> 8
	LD	R30,X+
	LD	R31,X
	LDD	R18,Z+3
	LDD	R19,Z+4
	LDI	R16,0
	LDI	R17,0
	CP	R18,R16
	CPC	R19,R17
	BREQ	??wal_timer_counter_0
//   40 	{
//   41 		if( wsp_tc->used == 1)
	LDI	R26,LOW(wsp_tc)
	LDI	R27,(wsp_tc) >> 8
	LD	R30,X+
	LD	R31,X
	LD	R16,Z
	CPI	R16,1
	BRNE	??wal_timer_counter_1
//   42 		{
//   43 			// tc active
//   44 			if( wsp_tc->count != 0)
	LDI	R26,LOW(wsp_tc)
	LDI	R27,(wsp_tc) >> 8
	LD	R30,X+
	LD	R31,X
	LDD	R16,Z+1
	LDD	R17,Z+2
	OR	R16,R17
	BREQ	??wal_timer_counter_1
//   45 			{
//   46 				wsp_tc->count--;
	LDI	R26,LOW(wsp_tc)
	LDI	R27,(wsp_tc) >> 8
	LD	R30,X+
	LD	R31,X
	LDD	R16,Z+1
	LDD	R17,Z+2
	SUBI	R16,1
	SBCI	R17,0
	STD	Z+1,R16
	STD	Z+2,R17
//   47 				if( wsp_tc->count == 0)
	LDI	R26,LOW(wsp_tc)
	LDI	R27,(wsp_tc) >> 8
	LD	R30,X+
	LD	R31,X
	LDD	R16,Z+1
	LDD	R17,Z+2
	OR	R16,R17
	BRNE	??wal_timer_counter_1
//   48 				{
//   49 					// call expiry routine
//   50 					(*wsp_tc->exp_routine)();
	LDI	R26,LOW(wsp_tc)
	LDI	R27,(wsp_tc) >> 8
	LD	R30,X+
	LD	R31,X
	LDD	R16,Z+3
	LDD	R17,Z+4
	MOVW	R31 : R30,R17 : R16
	ICALL
//   51 				}
//   52 			}
//   53 		}
//   54 		wsp_tc++;
??wal_timer_counter_1:
	LDI	R30,LOW(wsp_tc)
	LDI	R31,(wsp_tc) >> 8
	LD	R16,Z
	LDD	R17,Z+1
	SUBI	R16,251
	SBCI	R17,255
	ST	Z,R16
	STD	Z+1,R17
//   55 	}
//   56 }
??wal_timer_counter_0:
	LD	R26,Y+
	LD	R27,Y+
	RET

        ASEGN ABSOLUTE:DATA:NOROOT,01cH
__?EECR:

        ASEGN ABSOLUTE:DATA:NOROOT,01dH
__?EEDR:

        ASEGN ABSOLUTE:DATA:NOROOT,01eH
__?EEARL:

        ASEGN ABSOLUTE:DATA:NOROOT,01fH
__?EEARH:

        END
//   57 
//   58 
// 
// 146 bytes in segment CODE
// 
// 146 bytes of CODE memory
//
//Errors: none
//Warnings: 3
