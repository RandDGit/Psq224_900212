//////////////////////////////////////////////////////////////////////////////
//                                                                           /
// IAR Atmel AVR C Compiler V3.10C/W32                 31/Jan/2006  09:33:05 /
// Copyright 1996-2004 IAR Systems. All rights reserved.                     /
//                                                                           /
//    Source file  =  M:\VisualState\ProjectM16Motor\ew\src\simpleEventHandl /
//                    er.c                                                   /
//    Command line =  --cpu=m16 -ms -o M:\VisualState\ProjectM16Motor\ew\Deb /
//                    ug\Obj\ -lC M:\VisualState\ProjectM16Motor\ew\Debug\Li /
//                    st\ -lB M:\VisualState\ProjectM16Motor\ew\Debug\List\  /
//                    -z2 --no_cse --no_inline --no_code_motion              /
//                    --no_cross_call --no_clustering --debug                /
//                    -DENABLE_BIT_DEFINITIONS -e -I                         /
//                    M:\VisualState\ProjectM16Motor\ew\src\ -I              /
//                    M:\VisualState\ProjectM16Motor\ew\vssrc\ -I            /
//                    M:\VisualState\ProjectM16Motor\ew\vsapi\ -I            /
//                    "C:\Program Files\IAR Systems\Embedded Workbench       /
//                    3.2\avr\INC\" -I "C:\Program Files\IAR                 /
//                    Systems\Embedded Workbench 3.2\avr\INC\CLIB\"          /
//                    --eeprom_size 512 M:\VisualState\ProjectM16Motor\ew\sr /
//                    c\simpleEventHandler.c                                 /
//    List file    =  M:\VisualState\ProjectM16Motor\ew\Debug\List\simpleEve /
//                    ntHandler.s90                                          /
//                                                                           /
//                                                                           /
//////////////////////////////////////////////////////////////////////////////

        NAME simpleEventHandler

        RSEG CSTACK:DATA:NOROOT(0)
        RSEG RSTACK:DATA:NOROOT(0)

        EXTERN ?SS_DIVMOD_L02
        EXTERN ?need_segment_init

        PUBWEAK `?<Segment init: NEAR_Z>`
        PUBLIC SEQ_AddEvent
        PUBLIC SEQ_Clear
        PUBLIC SEQ_EventPendingP
        PUBLIC SEQ_Initialize
        PUBLIC SEQ_RetrieveEvent
        PUBWEAK __?EEARH
        PUBWEAK __?EEARL
        PUBWEAK __?EECR
        PUBWEAK __?EEDR

// M:\VisualState\ProjectM16Motor\ew\src\simpleEventHandler.c
//    1 /*****************************************************************************
//    2 * IAR visualSTATE Static Event Handler Source File (sample code)
//    3 *
//    4 * The file implements an event queue with a static size, specified by the
//    5 * value of the macro EVENT_QUEUE_SIZE.
//    6 *
//    7 * Whenever the queue runs full (by a call to SEQ_AddEvent), the event is ig-
//    8 * nored and an error is returned.
//    9 *
//   10 * A function is provided for initializing the queue, as well as functions for
//   11 * adding and retrieving events from the queue. See the associated header file
//   12 * for descriptions and use of those functions.
//   13 *
//   14 * The queue is a static variable in this file. If multiple queues are to be
//   15 * used, the static variable must be removed and the queue handling functions
//   16 * must be modified to take a parameter identifying a particular queue, for
//   17 * example a pointer to a queue.
//   18 *****************************************************************************/
//   19 
//   20 
//   21 
//   22 /* *** include directives *** */
//   23 
//   24 #include "simpleEventHandler.h"
//   25 
//   26 
//   27 
//   28 /* *** macro definitions *** */
//   29 
//   30 /** Event queue size. Defines the size of the event queue. */
//   31 #ifndef EVENT_QUEUE_SIZE
//   32 #define EVENT_QUEUE_SIZE 20
//   33 #endif
//   34 
//   35 
//   36 
//   37 /* *** type definitions *** */
//   38 
//   39 /** Event queue size type. Defines the type for indexes into the event queue.
//   40     The type must be an unsigned ordinal type, capable of holding values in
//   41     the range [0;EVENT_QUEUE_SIZE[. */
//   42 #if (EVENT_QUEUE_SIZE <= 0x0100)
//   43 typedef VS_UINT8 SEQ_SIZE_TYPE;
//   44 #elif (EVENT_QUEUE_SIZE <= 0x010000)
//   45 typedef VS_UINT16 SEQ_SIZE_TYPE;
//   46 #elif (EVENT_QUEUE_SIZE <= 0x01000000)
//   47 typedef VS_UINT32 SEQ_SIZE_TYPE;
//   48 #else
//   49 #error Cannot determine type of SEQ_SIZE_TYPE
//   50 #endif
//   51 
//   52 
//   53 
//   54 /** Event queue type. Defines the internal structure of the event queue. */
//   55 struct StaticEventQueue
//   56 {
//   57   /** Event queue. The array stores events in the queue. */
//   58   SEM_EVENT_TYPE queue[EVENT_QUEUE_SIZE];
//   59 
//   60   /** Front index into the queue. The front index specifies the index into the
//   61       array, where the next event will be retrieved from. */
//   62   SEQ_SIZE_TYPE front;
//   63 
//   64   /** Back index into the queue. The back index specifies the index into the
//   65       array, where the next event will be stored. */
//   66   SEQ_SIZE_TYPE back;
//   67 };
//   68 typedef struct StaticEventQueue StaticEventQueue;
//   69 
//   70 
//   71 
//   72 /* *** variable definitions *** */
//   73 
//   74 /** The event queue. If more than one event queue is needed (for example when
//   75     a visualSTATE project contains more than one system), the event queue must
//   76     be a parameter for all event queue handling functions instead of being a
//   77     static variable. */

        RSEG NEAR_Z:DATA:NOROOT(0)
	REQUIRE `?<Segment init: NEAR_Z>`
//   78 static StaticEventQueue eventQueue;
eventQueue:
        DS 22
//   79 
//   80 
//   81 
//   82 /* *** function definitions *** */
//   83 

        RSEG CODE:CODE:NOROOT(1)
//   84 void SEQ_Initialize(void)
SEQ_Initialize:
//   85 {
//   86   SEQ_Clear();
	RCALL	SEQ_Clear
//   87 }
	RET
//   88 
//   89 
//   90 

        RSEG CODE:CODE:NOROOT(1)
//   91 UCC_TYPE SEQ_AddEvent(SEM_EVENT_TYPE event)
SEQ_AddEvent:
//   92 {
	MOV	R22,R24
	MOV	R24,R16
//   93   /* Test whether the queue is full. */
//   94   if (eventQueue.front == eventQueue.back + 1)
	LDS	R18,(eventQueue + 20)
	LDI	R19,0
	LDS	R16,(eventQueue + 21)
	LDI	R17,0
	SUBI	R16,255
	SBCI	R17,255
	CP	R18,R16
	CPC	R19,R17
	BRNE	??SEQ_AddEvent_0
//   95     return UCC_QUEUE_FULL;
	LDI	R16,253
	RJMP	??SEQ_AddEvent_1
//   96 
//   97   /* Store the event in the queue. */
//   98   eventQueue.queue[eventQueue.back] = event;
??SEQ_AddEvent_0:
	LDS	R16,(eventQueue + 21)
	LDI	R17,0
	MOVW	R31 : R30,R17 : R16
	SUBI	R30,LOW((-(eventQueue) & 0xFFFF))
	SBCI	R31,(-(eventQueue) & 0xFFFF) >> 8
	ST	Z,R24
//   99 
//  100   /* Increment the back queue index. */
//  101   eventQueue.back = (SEQ_SIZE_TYPE) ((eventQueue.back + 1) % EVENT_QUEUE_SIZE);
	LDS	R16,(eventQueue + 21)
	LDI	R17,0
	SUBI	R16,255
	SBCI	R17,255
	LDI	R20,20
	LDI	R21,0
	CALL	?SS_DIVMOD_L02
	STS	(eventQueue + 21),R20
//  102 
//  103   return UCC_OK;
	LDI	R16,0
??SEQ_AddEvent_1:
	MOV	R24,R22
	RET
//  104 }
//  105 
//  106 
//  107 

        RSEG CODE:CODE:NOROOT(1)
//  108 UCC_TYPE SEQ_RetrieveEvent(SEM_EVENT_TYPE* pEvent)
SEQ_RetrieveEvent:
//  109 {
	MOV	R19,R25
	MOV	R18,R24
	MOVW	R25 : R24,R17 : R16
//  110   /* Test whether the queue is empty. */
//  111   if (eventQueue.front == eventQueue.back)
	LDS	R16,(eventQueue + 20)
	LDS	R17,(eventQueue + 21)
	CP	R16,R17
	BRNE	??SEQ_RetrieveEvent_0
//  112     return UCC_QUEUE_EMPTY;
	LDI	R16,254
	RJMP	??SEQ_RetrieveEvent_1
//  113 
//  114   /* Retrieve event from queue. */
//  115   *pEvent = eventQueue.queue[eventQueue.front];
??SEQ_RetrieveEvent_0:
	LDS	R16,(eventQueue + 20)
	LDI	R17,0
	MOVW	R31 : R30,R17 : R16
	SUBI	R30,LOW((-(eventQueue) & 0xFFFF))
	SBCI	R31,(-(eventQueue) & 0xFFFF) >> 8
	LD	R16,Z
	MOVW	R31 : R30,R25 : R24
	ST	Z,R16
//  116  
//  117   /* Increment the front queue index. */
//  118   eventQueue.front = (SEQ_SIZE_TYPE) ((eventQueue.front + 1) % EVENT_QUEUE_SIZE);
	LDS	R16,(eventQueue + 20)
	LDI	R17,0
	SUBI	R16,255
	SBCI	R17,255
	LDI	R20,20
	LDI	R21,0
	CALL	?SS_DIVMOD_L02
	STS	(eventQueue + 20),R20
//  119 
//  120   return UCC_OK;
	LDI	R16,0
??SEQ_RetrieveEvent_1:
	MOV	R24,R18
	MOV	R25,R19
	RET
//  121 }
//  122 
//  123 
//  124 

        RSEG CODE:CODE:NOROOT(1)
//  125 void SEQ_Clear(void)
SEQ_Clear:
//  126 {
//  127   eventQueue.front = eventQueue.back = 0;
	LDI	R16,0
	STS	(eventQueue + 21),R16
	STS	(eventQueue + 20),R16
//  128 }
	RET
//  129 
//  130 
//  131 

        RSEG CODE:CODE:NOROOT(1)
//  132 VS_BOOL SEQ_EventPendingP(void)
SEQ_EventPendingP:
//  133 {
//  134   return (VS_BOOL) (eventQueue.front != eventQueue.back);
	LDS	R16,(eventQueue + 20)
	LDS	R17,(eventQueue + 21)
	CP	R16,R17
	BREQ	??SEQ_EventPendingP_0
	LDI	R16,1
	RET
??SEQ_EventPendingP_0:
	LDI	R16,0
	RET
//  135 }

        ASEGN ABSOLUTE:DATA:NOROOT,01cH
__?EECR:

        ASEGN ABSOLUTE:DATA:NOROOT,01dH
__?EEDR:

        ASEGN ABSOLUTE:DATA:NOROOT,01eH
__?EEARL:

        ASEGN ABSOLUTE:DATA:NOROOT,01fH
__?EEARH:

        RSEG INITTAB:CODE:NOROOT(0)
`?<Segment init: NEAR_Z>`:
	DW	SFE(NEAR_Z) - SFB(NEAR_Z)
	DW	SFB(NEAR_Z)
	DW	0
	REQUIRE ?need_segment_init

        END
// 
// 178 bytes in segment CODE
//   6 bytes in segment INITTAB
//  22 bytes in segment NEAR_Z
// 
// 178 bytes of CODE memory (+ 6 bytes shared)
//  22 bytes of DATA memory
//
//Errors: none
//Warnings: none
