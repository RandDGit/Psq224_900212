##############################################################################
#                                                                            #
# IAR Atmel AVR C Compiler V3.10C/W32                  28/Sep/2012  11:33:27 #
# Copyright 1996-2004 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Source file  =  C:\hmhome\900212\src\VSMain.c                           #
#    Command line =  --cpu=m16 -ms -o C:\hmhome\900212\Debug\Obj\ -D         #
#                    ENABLE_BIT_DEFINITIONS -lcN                             #
#                    C:\hmhome\900212\Debug\List\ --initializers_in_flash    #
#                    -z2 --no_cse --no_inline --no_code_motion               #
#                    --no_cross_call --no_clustering --debug -e -I ..\SRC\   #
#                    -I ..\VSAPI\ -I ..\VSSRC\ -I "C:\Program Files\IAR      #
#                    Systems\Embedded Workbench 3.2\avr\INC\" -I             #
#                    "C:\Program Files\IAR Systems\Embedded Workbench        #
#                    3.2\avr\INC\CLIB\" --eeprom_size 512                    #
#                    C:\hmhome\900212\src\VSMain.c                           #
#    List file    =  C:\hmhome\900212\Debug\List\VSMain.lst                  #
#    Object file  =  C:\hmhome\900212\Debug\Obj\VSMain.r90                   #
#                                                                            #
#                                                                            #
##############################################################################

C:\hmhome\900212\src\VSMain.c
      1          /*****************************************************************************
      2          * IAR visualSTATE Main Loop Source File
      3          *
      4          * The file contains an implementation for a main loop using the visualSTATE
      5          * basic API.
      6          *
      7          * The code uses a simple queue for storing events. The functions for inter-
      8          * facing to the queue are described in the sample code file
      9          * simpleEventHandler.h.
     10          *****************************************************************************/
     11          
     12          
     13          
     14          #include <iom16.h>		 	// Atmel up definitions
     15          #include <inavr.h>			// AVR intrinsic functions
     16          #include "VSMain.h"			// VisualState definitions (further includes)
     17          
     18          void InitDevice(void);		// Critical device I/O setup
     19          void InitOutputs(void);		// Critical PORT setup (i.e. devices off)
     20          void UserLoop(void);		// User (application) loop
     21          
     22          							// NB. Setup of interrupts = DeviceSetup.c
     23          
     24          
     25          void HandleError(unsigned char cc);
     26          
     27          
     28          void RealLinkCommInit(void);
     29          
     30          
     31          void HandleError(unsigned char cc) 
     32          {
     33            /* Critical error: Stop State Machine: */
     34            while(1)
     35            {
     36          	// force watch-dog error (maybe set status led)
     37            }
     38          }
     39          
     40          void main(void) 
     41          {
     42          volatile int i = 0;
     43          volatile int j = 0;
     44          volatile int k = 0;
     45          
     46          /* Define completion code variable. */
     47          unsigned char cc;
     48          
     49          /* Define action expression variable. */
     50          SEM_ACTION_EXPRESSION_TYPE actionExpressNo;
     51          
     52          /* Define and initialize. */
     53          SEM_EVENT_TYPE eventNo;
     54          
     55          	__disable_interrupt();
     56          
     57          	InitDevice();
     58          
     59          	InitOutputs();
     60              
     61          	/* Initialize the VS System. */
     62          	SEM_InitAll();
     63              
     64          #if (VS_REALLINKMODE == 1)    
     65          	/* Initialize RealLink communication. */
     66          	RealLinkCommInit();
     67          	/* Initializing RealLink API. */
     68          	VS_RealLinkInit();    
     69          #endif  
     70            
     71          	/* Initialize the VS Event queue. */
     72          	SEQ_Initialize();
     73            
     74          	/* Add SE_RESET to initialize system. */
     75          	SEQ_AddEvent(SE_RESET);
     76          
     77          	__enable_interrupt();
     78            
     79          	/* Do forever: */
     80          	for(;;) 
     81            	{    
     82          #if (VS_REALLINKMODE == 1)
     83              	    VS_WAIT();
     84          #endif        
     85          
     86                      /* Provide function to do any other user (application) processing */
     87                      UserLoop();
     88          
     89                      if(SEQ_RetrieveEvent(&eventNo) != UCC_QUEUE_EMPTY)
     90                      {     
     91                		/* Deduct the event. */
     92                		if ((cc = SEM_Deduct(eventNo)) != SES_OKAY) 
     93          	          HandleError(eventNo);
     94                
     95                          if(eventNo == E_AxisMove || eventNo == E_AxisStop)
     96                          {
     97                            i++;
     98                            j++;
     99                            k++;
    100                          }
    101                
    102                		/* Get resulting action expressions and execute them. */
    103                		while ((cc = SEM_GetOutput(&actionExpressNo)) == SES_FOUND) 
    104                  	  SEM_Action(actionExpressNo);
    105                      
    106                		/* Check for error. */
    107                		if (cc != SES_OKAY) 
    108                  	  HandleError(cc);
    109                
    110                		/* Change the next state vector. */
    111                		if ((cc = SEM_NextState()) != SES_OKAY) 
    112                  	  HandleError(cc);          
    113                      }  
    114          	}
    115          }

   Maximum stack usage in bytes:

     Function               CSTACK RSTACK
     --------               ------ ------
     HandleError                0      2
     main                       9      2
       -> InitDevice            9      2
       -> InitOutputs           9      2
       -> SEM_InitAll           9      2
       -> SEQ_Initialize        9      2
       -> SEQ_AddEvent          9      2
       -> UserLoop              9      2
       -> SEQ_RetrieveEvent     9      2
       -> SEM_Deduct            9      2
       -> HandleError           9      2
       -> SEM_GetOutput         9      2
       ->   Indirect call       9      2
       -> HandleError           9      2
       -> SEM_NextState         9      2
       -> HandleError           9      2


   Segment part sizes:

     Function/Label  Bytes
     --------------  -----
     ??HandleError_0    2
     main             198

 
 200 bytes in segment CODE
 
 200 bytes of CODE memory

Errors: none
Warnings: none
