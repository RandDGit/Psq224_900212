##############################################################################
#                                                                            #
# IAR Atmel AVR C Compiler V3.10C/W32                  01/Oct/2012  09:22:44 #
# Copyright 1996-2004 IAR Systems. All rights reserved.                      #
#                                                                            #
#    Source file  =  C:\hmhome\900212\src\DeviceSetup.c                      #
#    Command line =  --cpu=m16 -ms -o C:\hmhome\900212\Debug\Obj\ -D         #
#                    ENABLE_BIT_DEFINITIONS -lcN                             #
#                    C:\hmhome\900212\Debug\List\ --initializers_in_flash    #
#                    -z2 --no_cse --no_inline --no_code_motion               #
#                    --no_cross_call --no_clustering --debug -e -I ..\SRC\   #
#                    -I ..\VSAPI\ -I ..\VSSRC\ -I "C:\Program Files\IAR      #
#                    Systems\Embedded Workbench 3.2\avr\INC\" -I             #
#                    "C:\Program Files\IAR Systems\Embedded Workbench        #
#                    3.2\avr\INC\CLIB\" --eeprom_size 512                    #
#                    C:\hmhome\900212\src\DeviceSetup.c                      #
#    List file    =  C:\hmhome\900212\Debug\List\DeviceSetup.lst             #
#    Object file  =  C:\hmhome\900212\Debug\Obj\DeviceSetup.r90              #
#                                                                            #
#                                                                            #
##############################################################################

C:\hmhome\900212\src\DeviceSetup.c
      1          /*****************************************************************************
      2          * IAR visualSTATE Device Setup File. Specific to Atmel ATmega16 processor
      3          * Provide handle for each of the processor interrupt function;
      4          * with corresponding event trigger as appropriate.
      5          *****************************************************************************/
      6          
      7          /* *** include directives *** */
      8          
      9          #include <iom16.h>
     10          #include <inavr.h>
     11          #include "VSMain.h"
     12          
     13          #include "defs.h"			// Application (GENERAL) defs
     14          #include "globals.h"		// Application global data/variables
     15          
     16          
     17          /* ATMEGA16 Interrupts */
     18          /*
     19          #define    INT0_vect            (0x04)
     20          #define    INT1_vect            (0x08)
     21          #define    TIMER2_COMP_vect     (0x0C)
     22          #define    TIMER2_OVF_vect      (0x10)
     23          #define    TIMER1_CAPT_vect     (0x14)
     24          #define    TIMER1_COMPA_vect    (0x18)
     25          #define    TIMER1_COMPB_vect    (0x1C)
     26          #define    TIMER1_OVF_vect      (0x20)
     27          #define    TIMER0_OVF_vect      (0x24)
     28          #define    SPI_STC_vect         (0x28)
     29          #define    USART_RXC_vect       (0x2C)
     30          #define    USART_UDRE_vect      (0x30)
     31          #define    USART_TXC_vect       (0x34)
     32          #define    ADC_vect             (0x38)
     33          #define    EE_RDY_vect          (0x3C)
     34          #define    ANA_COMP_vect        (0x40)
     35          #define    TWI_vect             (0x44)
     36          #define    INT2_vect            (0x48)
     37          #define    TIMER0_COMP_vect     (0x4C)
     38          #define    SPM_RDY_vect         (0x50)
     39          */
     40          
     41          #pragma vector=INT0_vect
     42          __interrupt void INT0_interrupt( void ) 
     43          {
     44          }
     45          #pragma vector=INT1_vect
     46          __interrupt void INT1_interrupt( void ) 
     47          {
     48          }
     49          #pragma vector=TIMER2_COMP_vect
     50          __interrupt void TIMER2_COMP_interrupt( void ) 
     51          {
     52          }
     53          #pragma vector=TIMER2_OVF_vect
     54          __interrupt void TIMER2_OVF_interrupt( void ) 
     55          {
     56          }
     57          #pragma vector=TIMER1_CAPT_vect
     58          __interrupt void TIMER1_CAPT_interrupt( void ) 
     59          {
     60          }
     61          #pragma vector=TIMER1_COMPA_vect
     62          __interrupt void TIMER1_COMPA_interrupt( void ) 
     63          {
     64          }
     65          #pragma vector=TIMER1_COMPB_vect
     66          __interrupt void TIMER1_COMPB_interrupt( void ) 
     67          {
     68          }
     69          #pragma vector=TIMER1_OVF_vect
     70          __interrupt void TIMER1_OVF_interrupt( void ) 
     71          {
     72          }
     73          #pragma vector=TIMER0_OVF_vect
     74          __interrupt void TIMER0_OVF_interrupt( void ) 
     75          {
     76            // reload overflow preset to determine overflow period: TCNT0 = mTCNT;
     77            TCNT0 = uc_tm0preset;
     78            uc_tprim++;
     79          }
     80          #pragma vector=SPI_STC_vect
     81          __interrupt void SPI_STC_interrupt( void ) 
     82          {
     83          }
     84          #pragma vector=USART_RXC_vect
     85          __interrupt void USART_RXC_interrupt( void ) 
     86          {
     87            // following status & character in sequence must be used for UART Rx operation:
     88            uc_rx_stata = UCSRA;
     89            uc_rx_statb = UCSRB;
     90            uc_rx_chbyte = UDR;		// Read UART data register
     91          
     92            // Clear line_idle monitor (i.e. block transmit)
     93            uc_comm_idle = 0;
     94            uc_comm_flag &= ~WAL_COMM_IDLE;
     95            
     96            // ATMEL Framing error 0x10 or Overrun 0x08
     97            if( uc_rx_stata & 0x18)
     98            {
     99              // ignore character (noise)
    100              uc_comm_flag |= WAL_COMM_DERR;
    101            }
    102            else
    103            {
    104              uc_rxbuff[uc_rxwrptr].status = uc_rx_statb;	/* uc_comm_9set = */
    105              uc_rxbuff[uc_rxwrptr].charin = uc_rx_chbyte;/* uc_rx_chrecv = */
    106              uc_rxwrptr++;
    107              uc_rxwrptr &= (WAL_MAX_RXBUFF-1);
    108            }
    109          }
    110          #pragma vector=USART_UDRE_vect
    111          __interrupt void USART_UDRE_interrupt( void ) 
    112          {
    113          }
    114          #pragma vector=USART_TXC_vect
    115          __interrupt void USART_TXC_interrupt( void ) 
    116          {
    117            uc_tx_chsent = 1;	// used rather than Add_Event directly to minimize overhead
    118          }
    119          
    120          #pragma vector=ADC_vect
    121          __interrupt void ADC_interrupt( void ) 
    122          {
    123          }
    124          #pragma vector=EE_RDY_vect
    125          __interrupt void EE_RDY_interrupt( void ) 
    126          {
    127          }
    128          #pragma vector=ANA_COMP_vect
    129          __interrupt void ANA_COMP_interrupt( void ) 
    130          {
    131          }
    132          #pragma vector=TWI_vect
    133          __interrupt void TWI_interrupt( void ) 
    134          {
    135          }
    136          #pragma vector=INT2_vect
    137          __interrupt void INT2_interrupt( void ) 
    138          {
    139          }
    140          #pragma vector=TIMER0_COMP_vect
    141          __interrupt void TIMER0_COMP_interrupt( void ) 
    142          {
    143          }
    144          #pragma vector=SPM_RDY_vect
    145          __interrupt void SPM_RDY_interrupt( void ) 
    146          {
    147          }
    148          
    149          
    150          
    151          #if (VS_REALLINKMODE == 1)
    152          /* Interrupt Service Routine (ISR) for UART Receive. */
    153          #pragma vector=UART_RX_vect
    154          __interrupt void UART_RX_interrupt(void) 
    155          {
    156            while (USR & (1 << RXC)) 
    157              VS_RealLinkReceive((unsigned char)UDR);
    158          }
    159          
    160          void RealLinkCommInit(void)
    161          {
    162            /* If using a 4MHz crystal, set UBBR to 12. */
    163            /* Set the baudrate to 19,200 bps using a 3.69MHz clock. */
    164            UBRR = 11; 	
    165          
    166            /* Enable UART receiver and transmitter, and receive interrupt */
    167            UCR = ((1<<RXCIE) | (1<<RXEN) | (1<<TXEN));
    168          }
    169          
    170          void RealLinkReset( void ) 
    171          {
    172          }
    173          
    174          void RealLinkTransmit(unsigned char data)
    175          {
    176            /* Start transmittion */
    177            UDR = data; 			        
    178            /* Wait for empty transmit buffer */
    179            while (!(USR & (1<<UDRE)));
    180          }
    181          #endif

   Maximum stack usage in bytes:

     Function               CSTACK RSTACK
     --------               ------ ------
     ADC_interrupt              1      2
     ANA_COMP_interrupt         1      2
     EE_RDY_interrupt           1      2
     INT0_interrupt             1      2
     INT1_interrupt             1      2
     INT2_interrupt             1      2
     SPI_STC_interrupt          1      2
     SPM_RDY_interrupt          1      2
     TIMER0_COMP_interrupt      1      2
     TIMER0_OVF_interrupt       4      2
     TIMER1_CAPT_interrupt      1      2
     TIMER1_COMPA_interrupt     1      2
     TIMER1_COMPB_interrupt     1      2
     TIMER1_OVF_interrupt       1      2
     TIMER2_COMP_interrupt      1      2
     TIMER2_OVF_interrupt       1      2
     TWI_interrupt              1      2
     USART_RXC_interrupt        6      2
     USART_TXC_interrupt        2      2
     USART_UDRE_interrupt       1      2


   Segment part sizes:

     Function/Label         Bytes
     --------------         -----
     INT0_interrupt            2
     INT1_interrupt            2
     TIMER2_COMP_interrupt     2
     TIMER2_OVF_interrupt      2
     TIMER1_CAPT_interrupt     2
     TIMER1_COMPA_interrupt    2
     TIMER1_COMPB_interrupt    2
     TIMER1_OVF_interrupt      2
     TIMER0_OVF_interrupt     38
     SPI_STC_interrupt         2
     USART_RXC_interrupt     152
     USART_UDRE_interrupt      2
     USART_TXC_interrupt      12
     ADC_interrupt             2
     EE_RDY_interrupt          2
     ANA_COMP_interrupt        2
     TWI_interrupt             2
     INT2_interrupt            2
     TIMER0_COMP_interrupt     2
     SPM_RDY_interrupt         2
     _A_UCSRB                  1
     _A_UCSRA                  1
     _A_UDR                    1
     _A_TCNT0                  1
      Others                  80

 
   4 bytes in segment ABSOLUTE
 236 bytes in segment CODE
  80 bytes in segment INTVEC
 
 316 bytes of CODE memory
   0 bytes of DATA memory (+ 4 bytes shared)

Errors: none
Warnings: 3
